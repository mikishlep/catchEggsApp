import { Bot, InputFile, InlineKeyboard } from "grammy";
import 'dotenv/config';

const bot = new Bot(process.env.BOT_TOKEN);
const supportSessions = new Map();
const ADMIN_ID = Number(process.env.ADMIN_ID);

bot.command("start", async (ctx) => {
    const keyboard = new InlineKeyboard().text("üì© –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º", "support");
    await ctx.replyWithPhoto(
      new InputFile("img/glavskidaLogo.jpg"),
      {
        caption: `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "–ì–ª–∞–≤—Ä–µ–∫–ª–∞–º–∞"!</b>\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–∏–¥–∫–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É.`,
        parse_mode: "HTML",
        reply_markup: keyboard
      }
    );
});

bot.callbackQuery("support", async ctx => {
    await ctx.answerCallbackQuery();
    supportSessions.set(ctx.from.id, true);
    await ctx.reply("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.");
});

bot.on("message:text", async (ctx) => {
    const userId = ctx.from.id;

    // –õ–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω–∞
    if (userId === ADMIN_ID && ctx.message.reply_to_message) {
        const originalText = ctx.message.reply_to_message.text;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        const match = originalText.match(/ID: (\d+)/);
        const targetUserId = match ? Number(match[1]) : null;

        if (targetUserId) {
            await bot.api.sendMessage(targetUserId, ctx.message.text);
        } else {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.");
        }

        return;
    }

    if (supportSessions.get(userId)) {
        const keyboard = new InlineKeyboard()
            .text("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", `end_${userId}`);

        const message = ctx.message.text;

        await bot.api.sendMessage(
            ADMIN_ID,
            `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n<b>${message}</b>\n\nID: ${userId}`,
            { 
                parse_mode: "HTML",
                reply_markup: keyboard
            }
        );

        await ctx.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.");
    }
});

bot.callbackQuery(/end_(\d+)$/, async (ctx) => {
    await ctx.answerCallbackQuery();
    const targetUserId = Number(ctx.match[1]);
    // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    supportSessions.delete(targetUserId);
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await ctx.reply(`–°–µ—Å—Å–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${targetUserId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.api.sendMessage(
      targetUserId,
      "–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º¬ª."
    );
});

bot.catch(err => console.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err));
bot.start();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");